"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ERC20 = void 0;

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _ethereumjsAbi = _interopRequireDefault(require("ethereumjs-abi"));

var _abiToByte = require("iotex-antenna/lib/contract/abi-to-byte");

var _contract = require("iotex-antenna/lib/contract/contract");

var _address = require("iotex-antenna/lib/crypto/address");

var _abi = require("./abi");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ERC20 {
  constructor() {
    _defineProperty(this, "address", void 0);

    _defineProperty(this, "contract", void 0);

    _defineProperty(this, "provider", void 0);

    _defineProperty(this, "methods", void 0);
  }

  static create(address, provider) {
    const erc20 = new ERC20();
    erc20.address = address;
    erc20.provider = provider;
    erc20.contract = new _contract.Contract(_abi.ABI, address, {
      provider: provider
    });
    const methods = {}; // @ts-ignore

    for (const fnName of Object.keys(erc20.contract.getABI())) {
      // @ts-ignore
      const fnAbi = erc20.contract.getABI()[fnName];

      if (fnAbi.type === "constructor") {
        continue;
      }

      const args = (0, _abiToByte.getArgTypes)(fnAbi);
      const header = (0, _abiToByte.getHeaderHash)(fnAbi, args); // @ts-ignore

      methods[header] = {
        name: fnName,
        inputsNames: args.map(i => {
          return `${i.name}`;
        }),
        inputsTypes: args.map(i => {
          return `${i.type}`;
        })
      };
    }

    erc20.methods = methods;
    return erc20;
  }

  async name(callerAddress) {
    const result = await this.readMethod("name", callerAddress);

    const data = _ethereumjsAbi.default.rawDecode(["string"], Buffer.from(result, "hex"));

    if (data.length > 0) {
      return data[0];
    }

    return "";
  }

  async symbol(callerAddress) {
    const result = await this.readMethod("symbol", callerAddress);

    const data = _ethereumjsAbi.default.rawDecode(["string"], Buffer.from(result, "hex"));

    if (data.length > 0) {
      return data[0];
    }

    return "";
  }

  async decimals(callerAddress) {
    const result = await this.readMethod("decimals", callerAddress);
    return new _bignumber.default(result, 16);
  }

  async totalSupply(callerAddress) {
    const result = await this.readMethod("totalSupply", callerAddress);
    return new _bignumber.default(result, 16);
  }

  async balanceOf(owner, callerAddress) {
    const result = await this.readMethod("balanceOf", callerAddress, owner);
    return new _bignumber.default(result, 16);
  }

  async transfer(to, value, account, gasPrice, gasLimit) {
    return this.executeMethod("transfer", account, gasPrice, gasLimit, "0", to, value.toFixed(0));
  }

  async allowance(owner, spender, account, gasPrice, gasLimit) {
    return this.executeMethod("allowance", account, gasPrice, gasLimit, "0", owner, spender);
  }

  async approve(spender, value, account, gasPrice, gasLimit) {
    return this.executeMethod("approve", account, gasPrice, gasLimit, "0", spender, value.toFixed(0));
  }

  async transferFrom(from, to, value, account, gasPrice, gasLimit) {
    return this.executeMethod("transferFrom", account, gasPrice, gasLimit, "0", from, to, value.toFixed(0));
  }

  async readMethod(method, callerAddress, // @ts-ignore
  // tslint:disable-next-line: typedef
  ...args) {
    const result = await this.provider.readContract({
      execution: this.contract.pureEncodeMethod("0", method, ...args),
      callerAddress: callerAddress
    });
    return result.data;
  }

  executeMethod(method, account, gasPrice, gasLimit, amount, // @ts-ignore
  // tslint:disable-next-line: typedef
  ...args) {
    return this.contract.methods[method](...args, {
      account: account,
      amount: amount,
      gasLimit: gasLimit,
      gasPrice: gasPrice
    });
  }

  decode(data) {
    if (data.length < 8) {
      throw new Error("input data error");
    }

    const methodKey = data.substr(0, 8);
    const method = this.methods[methodKey];

    if (!method) {
      throw new Error(`method ${methodKey} is not erc20 method`);
    }

    const params = _ethereumjsAbi.default.rawDecode(method.inputsTypes, Buffer.from(data.substring(8), "hex"));

    const values = {};

    for (let i = 0; i < method.inputsTypes.length; i++) {
      if (method.inputsTypes[i] === "address") {
        params[i] = (0, _address.fromBytes)(Buffer.from(params[i].toString(), "hex")).string();
      } // @ts-ignore


      values[method.inputsNames[i]] = params[i];
    }

    return {
      method: method.name,
      data: values
    };
  }

}

exports.ERC20 = ERC20;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,