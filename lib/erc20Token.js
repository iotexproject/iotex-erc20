"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ERC20Token = void 0;

var _erc = require("./erc20");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ERC20Token {
  constructor(erc20TokenAddress, provider) {
    _defineProperty(this, "erc20", void 0);

    if (!ERC20Token.erc20Refs[erc20TokenAddress]) {
      ERC20Token.erc20Refs[erc20TokenAddress] = _erc.ERC20.create(erc20TokenAddress, provider);
    }

    this.erc20 = ERC20Token.erc20Refs[erc20TokenAddress];
    ERC20Token.erc20TokenRefs[erc20TokenAddress] = this;
  }

  static getToken(erc20TokenAddress, provider) {
    if (!ERC20Token.erc20TokenRefs[erc20TokenAddress]) {
      ERC20Token.erc20TokenRefs[erc20TokenAddress] = new ERC20Token(erc20TokenAddress, provider);
    }

    return ERC20Token.erc20TokenRefs[erc20TokenAddress];
  }

  decode(data) {
    return this.erc20.decode(data);
  }

  async checkValid() {
    try {
      const symbol = await this.erc20.symbol(this.erc20.address);
      return `${symbol}`.length > 0;
    } catch (error) {
      return false;
    }
  }

  async getInfo(walletAddress) {
    const erc20 = this.erc20;
    const [balance, name, symbol, decimals] = await Promise.all([erc20.balanceOf(walletAddress, walletAddress), erc20.name(walletAddress), erc20.symbol(walletAddress), erc20.decimals(walletAddress)]);
    const balanceString = balance.dividedBy(10 ** decimals.toNumber()).toString();
    return {
      erc20TokenAddress: this.erc20.address,
      balance,
      decimals,
      symbol,
      name,
      balanceString
    };
  }

  async transfer(to, value, account, gasPrice, gasLimit) {
    return this.erc20.transfer(to, value, account, gasPrice, gasLimit);
  }

}

exports.ERC20Token = ERC20Token;

_defineProperty(ERC20Token, "erc20Refs", {});

_defineProperty(ERC20Token, "erc20TokenRefs", {});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lcmMyMFRva2VuLnRzIl0sIm5hbWVzIjpbIkVSQzIwVG9rZW4iLCJjb25zdHJ1Y3RvciIsImVyYzIwVG9rZW5BZGRyZXNzIiwicHJvdmlkZXIiLCJlcmMyMFJlZnMiLCJFUkMyMCIsImNyZWF0ZSIsImVyYzIwIiwiZXJjMjBUb2tlblJlZnMiLCJnZXRUb2tlbiIsImRlY29kZSIsImRhdGEiLCJjaGVja1ZhbGlkIiwic3ltYm9sIiwiYWRkcmVzcyIsImxlbmd0aCIsImVycm9yIiwiZ2V0SW5mbyIsIndhbGxldEFkZHJlc3MiLCJiYWxhbmNlIiwibmFtZSIsImRlY2ltYWxzIiwiUHJvbWlzZSIsImFsbCIsImJhbGFuY2VPZiIsImJhbGFuY2VTdHJpbmciLCJkaXZpZGVkQnkiLCJ0b051bWJlciIsInRvU3RyaW5nIiwidHJhbnNmZXIiLCJ0byIsInZhbHVlIiwiYWNjb3VudCIsImdhc1ByaWNlIiwiZ2FzTGltaXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7OztBQW9CTyxNQUFNQSxVQUFOLENBQWlCO0FBS3RCQyxFQUFBQSxXQUFXLENBQUNDLGlCQUFELEVBQTRCQyxRQUE1QixFQUFrRDtBQUFBOztBQUMzRCxRQUFJLENBQUNILFVBQVUsQ0FBQ0ksU0FBWCxDQUFxQkYsaUJBQXJCLENBQUwsRUFBOEM7QUFDNUNGLE1BQUFBLFVBQVUsQ0FBQ0ksU0FBWCxDQUFxQkYsaUJBQXJCLElBQTBDRyxXQUFNQyxNQUFOLENBQ3hDSixpQkFEd0MsRUFFeENDLFFBRndDLENBQTFDO0FBSUQ7O0FBQ0QsU0FBS0ksS0FBTCxHQUFhUCxVQUFVLENBQUNJLFNBQVgsQ0FBcUJGLGlCQUFyQixDQUFiO0FBQ0FGLElBQUFBLFVBQVUsQ0FBQ1EsY0FBWCxDQUEwQk4saUJBQTFCLElBQStDLElBQS9DO0FBQ0Q7O0FBRUQsU0FBY08sUUFBZCxDQUF1QlAsaUJBQXZCLEVBQWtEQyxRQUFsRCxFQUFvRjtBQUNsRixRQUFJLENBQUNILFVBQVUsQ0FBQ1EsY0FBWCxDQUEwQk4saUJBQTFCLENBQUwsRUFBbUQ7QUFDakRGLE1BQUFBLFVBQVUsQ0FBQ1EsY0FBWCxDQUEwQk4saUJBQTFCLElBQStDLElBQUlGLFVBQUosQ0FDN0NFLGlCQUQ2QyxFQUU3Q0MsUUFGNkMsQ0FBL0M7QUFJRDs7QUFDRCxXQUFPSCxVQUFVLENBQUNRLGNBQVgsQ0FBMEJOLGlCQUExQixDQUFQO0FBQ0Q7O0FBRU1RLEVBQUFBLE1BQVAsQ0FBY0MsSUFBZCxFQUF3QztBQUN0QyxXQUFPLEtBQUtKLEtBQUwsQ0FBV0csTUFBWCxDQUFrQkMsSUFBbEIsQ0FBUDtBQUNEOztBQUVELFFBQWFDLFVBQWIsR0FBNEM7QUFDMUMsUUFBSTtBQUNGLFlBQU1DLE1BQU0sR0FBRyxNQUFNLEtBQUtOLEtBQUwsQ0FBV00sTUFBWCxDQUFrQixLQUFLTixLQUFMLENBQVdPLE9BQTdCLENBQXJCO0FBQ0EsYUFBUSxHQUFFRCxNQUFPLEVBQVYsQ0FBWUUsTUFBWixHQUFxQixDQUE1QjtBQUNELEtBSEQsQ0FHRSxPQUFPQyxLQUFQLEVBQWM7QUFDZCxhQUFPLEtBQVA7QUFDRDtBQUNGOztBQUVELFFBQWFDLE9BQWIsQ0FBcUJDLGFBQXJCLEVBQXNFO0FBQ3BFLFVBQU1YLEtBQUssR0FBRyxLQUFLQSxLQUFuQjtBQUNBLFVBQU0sQ0FBQ1ksT0FBRCxFQUFVQyxJQUFWLEVBQWdCUCxNQUFoQixFQUF3QlEsUUFBeEIsSUFBb0MsTUFBTUMsT0FBTyxDQUFDQyxHQUFSLENBSzlDLENBQ0FoQixLQUFLLENBQUNpQixTQUFOLENBQWdCTixhQUFoQixFQUErQkEsYUFBL0IsQ0FEQSxFQUVBWCxLQUFLLENBQUNhLElBQU4sQ0FBV0YsYUFBWCxDQUZBLEVBR0FYLEtBQUssQ0FBQ00sTUFBTixDQUFhSyxhQUFiLENBSEEsRUFJQVgsS0FBSyxDQUFDYyxRQUFOLENBQWVILGFBQWYsQ0FKQSxDQUw4QyxDQUFoRDtBQVdBLFVBQU1PLGFBQWEsR0FBR04sT0FBTyxDQUMxQk8sU0FEbUIsQ0FDVCxNQUFNTCxRQUFRLENBQUNNLFFBQVQsRUFERyxFQUVuQkMsUUFGbUIsRUFBdEI7QUFHQSxXQUFPO0FBQ0wxQixNQUFBQSxpQkFBaUIsRUFBRSxLQUFLSyxLQUFMLENBQVdPLE9BRHpCO0FBRUxLLE1BQUFBLE9BRks7QUFHTEUsTUFBQUEsUUFISztBQUlMUixNQUFBQSxNQUpLO0FBS0xPLE1BQUFBLElBTEs7QUFNTEssTUFBQUE7QUFOSyxLQUFQO0FBUUQ7O0FBRUQsUUFBYUksUUFBYixDQUNFQyxFQURGLEVBRUVDLEtBRkYsRUFHRUMsT0FIRixFQUlFQyxRQUpGLEVBS0VDLFFBTEYsRUFNbUI7QUFDakIsV0FBTyxLQUFLM0IsS0FBTCxDQUFXc0IsUUFBWCxDQUFvQkMsRUFBcEIsRUFBd0JDLEtBQXhCLEVBQStCQyxPQUEvQixFQUF3Q0MsUUFBeEMsRUFBa0RDLFFBQWxELENBQVA7QUFDRDs7QUF6RXFCOzs7O2dCQUFYbEMsVSxlQUVzRCxFOztnQkFGdERBLFUsb0JBRytELEUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmlnTnVtYmVyIGZyb20gXCJiaWdudW1iZXIuanNcIjtcbmltcG9ydCB7IEFjY291bnQgfSBmcm9tIFwiaW90ZXgtYW50ZW5uYS9saWIvYWNjb3VudC9hY2NvdW50XCI7XG5pbXBvcnQgeyBEZWNvZGVEYXRhLCBFUkMyMCwgSUVSQzIwIH0gZnJvbSBcIi4vZXJjMjBcIjtcbmltcG9ydCB7IElScGNNZXRob2QgfSBmcm9tIFwiaW90ZXgtYW50ZW5uYS9saWIvcnBjLW1ldGhvZC90eXBlc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElFUkMyMFRva2VuSW5mbyB7XG4gIGVyYzIwVG9rZW5BZGRyZXNzOiBzdHJpbmc7XG4gIGJhbGFuY2U6IEJpZ051bWJlcjtcbiAgZGVjaW1hbHM6IEJpZ051bWJlcjtcbiAgc3ltYm9sOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgYmFsYW5jZVN0cmluZzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElFUkMyMFRva2VuRGljdCB7XG4gIFtpbmRleDogc3RyaW5nXTogRVJDMjBUb2tlbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRVJDMjBUb2tlbkluZm9EaWN0IHtcbiAgW2luZGV4OiBzdHJpbmddOiBJRVJDMjBUb2tlbkluZm87XG59XG5cbmV4cG9ydCBjbGFzcyBFUkMyMFRva2VuIHtcbiAgcHJpdmF0ZSByZWFkb25seSBlcmMyMDogSUVSQzIwO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBlcmMyMFJlZnM6IHsgW2luZGV4OiBzdHJpbmddOiBJRVJDMjAgfSA9IHt9O1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBlcmMyMFRva2VuUmVmczogeyBbaW5kZXg6IHN0cmluZ106IEVSQzIwVG9rZW4gfSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKGVyYzIwVG9rZW5BZGRyZXNzOiBzdHJpbmcsIHByb3ZpZGVyOiBJUnBjTWV0aG9kKSB7XG4gICAgaWYgKCFFUkMyMFRva2VuLmVyYzIwUmVmc1tlcmMyMFRva2VuQWRkcmVzc10pIHtcbiAgICAgIEVSQzIwVG9rZW4uZXJjMjBSZWZzW2VyYzIwVG9rZW5BZGRyZXNzXSA9IEVSQzIwLmNyZWF0ZShcbiAgICAgICAgZXJjMjBUb2tlbkFkZHJlc3MsXG4gICAgICAgIHByb3ZpZGVyXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmVyYzIwID0gRVJDMjBUb2tlbi5lcmMyMFJlZnNbZXJjMjBUb2tlbkFkZHJlc3NdO1xuICAgIEVSQzIwVG9rZW4uZXJjMjBUb2tlblJlZnNbZXJjMjBUb2tlbkFkZHJlc3NdID0gdGhpcztcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0VG9rZW4oZXJjMjBUb2tlbkFkZHJlc3M6IHN0cmluZywgcHJvdmlkZXI6IElScGNNZXRob2QpOiBFUkMyMFRva2VuIHtcbiAgICBpZiAoIUVSQzIwVG9rZW4uZXJjMjBUb2tlblJlZnNbZXJjMjBUb2tlbkFkZHJlc3NdKSB7XG4gICAgICBFUkMyMFRva2VuLmVyYzIwVG9rZW5SZWZzW2VyYzIwVG9rZW5BZGRyZXNzXSA9IG5ldyBFUkMyMFRva2VuKFxuICAgICAgICBlcmMyMFRva2VuQWRkcmVzcyxcbiAgICAgICAgcHJvdmlkZXJcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBFUkMyMFRva2VuLmVyYzIwVG9rZW5SZWZzW2VyYzIwVG9rZW5BZGRyZXNzXTtcbiAgfVxuXG4gIHB1YmxpYyBkZWNvZGUoZGF0YTogc3RyaW5nKTogRGVjb2RlRGF0YSB7XG4gICAgcmV0dXJuIHRoaXMuZXJjMjAuZGVjb2RlKGRhdGEpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGNoZWNrVmFsaWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHN5bWJvbCA9IGF3YWl0IHRoaXMuZXJjMjAuc3ltYm9sKHRoaXMuZXJjMjAuYWRkcmVzcyk7XG4gICAgICByZXR1cm4gYCR7c3ltYm9sfWAubGVuZ3RoID4gMDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRJbmZvKHdhbGxldEFkZHJlc3M6IHN0cmluZyk6IFByb21pc2U8SUVSQzIwVG9rZW5JbmZvPiB7XG4gICAgY29uc3QgZXJjMjAgPSB0aGlzLmVyYzIwO1xuICAgIGNvbnN0IFtiYWxhbmNlLCBuYW1lLCBzeW1ib2wsIGRlY2ltYWxzXSA9IGF3YWl0IFByb21pc2UuYWxsPFxuICAgICAgQmlnTnVtYmVyLFxuICAgICAgc3RyaW5nLFxuICAgICAgc3RyaW5nLFxuICAgICAgQmlnTnVtYmVyXG4gICAgPihbXG4gICAgICBlcmMyMC5iYWxhbmNlT2Yod2FsbGV0QWRkcmVzcywgd2FsbGV0QWRkcmVzcyksXG4gICAgICBlcmMyMC5uYW1lKHdhbGxldEFkZHJlc3MpLFxuICAgICAgZXJjMjAuc3ltYm9sKHdhbGxldEFkZHJlc3MpLFxuICAgICAgZXJjMjAuZGVjaW1hbHMod2FsbGV0QWRkcmVzcylcbiAgICBdKTtcbiAgICBjb25zdCBiYWxhbmNlU3RyaW5nID0gYmFsYW5jZVxuICAgICAgLmRpdmlkZWRCeSgxMCAqKiBkZWNpbWFscy50b051bWJlcigpKVxuICAgICAgLnRvU3RyaW5nKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVyYzIwVG9rZW5BZGRyZXNzOiB0aGlzLmVyYzIwLmFkZHJlc3MsXG4gICAgICBiYWxhbmNlLFxuICAgICAgZGVjaW1hbHMsXG4gICAgICBzeW1ib2wsXG4gICAgICBuYW1lLFxuICAgICAgYmFsYW5jZVN0cmluZ1xuICAgIH07XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgdHJhbnNmZXIoXG4gICAgdG86IHN0cmluZyxcbiAgICB2YWx1ZTogQmlnTnVtYmVyLFxuICAgIGFjY291bnQ6IEFjY291bnQsXG4gICAgZ2FzUHJpY2U6IHN0cmluZyxcbiAgICBnYXNMaW1pdDogc3RyaW5nXG4gICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuZXJjMjAudHJhbnNmZXIodG8sIHZhbHVlLCBhY2NvdW50LCBnYXNQcmljZSwgZ2FzTGltaXQpO1xuICB9XG59XG4iXX0=